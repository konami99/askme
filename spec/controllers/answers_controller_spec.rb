require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AnswersController, :type => :controller do

  before(:each) do
    @user = create(:user)
    session[:user_id] = @user.id
    session[:username] = @user.username
  end

  describe 'POST #create' do
    context 'with valid attributes' do
      it 'saves the new answer in the database' do
        question = create(:question)
        expect{
          post :create, content: '123test', user_id: @user.id, question_id: question.id, answer_status_id: 2, id: question.id
        }.to change(Answer, :count).by(1)
      end

      it 'update like count' do
        answer = create(:answer)
        put :update, id: answer, answer_attributes:answer.answer_attribute
      end
    end
  end


end
